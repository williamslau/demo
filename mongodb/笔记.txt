默认安装到
C:\Program Files (x86)\MongoDB\Server\3.2\bin

命令行启动
mongod --dbpath d:\Mongodb\data -port=27017 
32位需要加-storageEngine=mmapv1


切换数据库
use database_name      database_name代表数据库的名字
如果此数据库存在，则切换到此数据库下,如果此数据库还不存在也可以切过来


查看当前使用的数据库
db 或 db.getName()

删除当前集合
db.dropDatabase()
删除集合
db.runCommand({drop:'students'});
创建一个集合
db.createCollection('students');

删除集合
db.students.drop();

查询数据库下的集合
db.strdents.find();

查询集合中数据条数
db.students.count();

关闭数据库
db.shutdownServer();

查看集合帮助
db.students.help();

查看数据库
show dbs


查看集合里有那些集合
show collections



插入数据
db.students.insert({name:'zfpx',age:1});
更改数据
db.students.save();


更新文档
db.students.update({name:1}{name:222,age:666});
$set,只更新部分字段
db.students.update({name:1},{$set:{age:44}});
$inc,在原基础上累加
db.students.update({name:1},{$inc:{age:1}});
{multi:true}匹配全部更逊
db.students.update({age:45},{$set:{nome:'beijing'}},{multi:true});

$unset删除字段
db.students.update({age:45},{$unset:{nome:'beijing'}},{multi:true});
{upsert:true}如果不存在符合条件的记录时是否插入
更新的时候插入一条消息（有就更新，没有就新插入）
> db.students.update({age:12},{city:'sss'},{upsert:true});
更新固定的哪一条
db.students.update({age:12},{$set:{city:'sss'}},{upsert:true});


$push往数组里添加（不推荐使用）
db.students.update({name:'aaa'},{$push:{hobby:'drinling'}});

$addToSet往数组里添加,如果有相同的值就不会在往里添加
db.students.update({name:'aaa'},{$addToSet:{hobby:'drinling'}});
$each 循环往里添加
db.students.update({name:'aaa'},{$addToSet:{hobby:{$each:['fish','traval']}}});

删除元素
$pop删除最后一个元素
db.students.update({name:'aaa'},{$pop:{hobby:1}});
更改指定下标的元素$set:{'hobby.1':'play'}
db.students.update({name:'aaa'},{$set:{'hobby.1':'play'}});


{justOne:true}只删除一条
db.students.remove({},{justOne:true});
全部删除
db.students.remove({});




查询
条件只能有0或者只能有1
db.students.find({},{name:1,age:1});
$or 或者
db.students.find({$or: [{key1: value1}, {key2:value2}]})

and
find方法可以传入多个键(key)，每个键(key)以逗号隔开
语法
db.collection_name.find({key1:value1, key2:value2})
实例 查询name是zfpx并且age是1的数据
db.students.find({name:'zfpx',age:1})

or
db.collection_name.find({$or: [{key1: value1}, {key2:value2}]})

实例 查询age = 30 或者 age = 50 的数据
db.students.find({$or:[{age:30},{age:50}]})

and和or联用
db.collection_name.find({key1:value1,key2:value2,$or: [{key1: value1},{key2:value2}]})

实例 查询 name是zfpx 并且 age是30 或者 age是 50 的数据
db.students.find({name:'zfpx',$or:[{age:30},{age:50}]})


只返回第一条
db.students.findOne();
返回指定数据
包含$in:[20,70]
不包含$nin:[20,70]
取反$not:{$in:[20,70]}
$gt:20,$lt:70 大于20小于70
$gte:20,$lte:70 大于等于20小于等于70
db.students.find({age:{$in:[20,70]}});
db.students.find({age:{$nin:[20,70]}});
db.students.find({age:{$not:{$in:[20,70]}}});
db.students.find({age:{$gte:20,$lte:70}});

$gt 大于
$gte 大于等于
$lt 小于
$lte 小于等于



数组方法
$all 查询多个
db.students.find({hobby:'smoking'});
db.students.find({hobby:{$all:['smoking','drinking']}});
$in 查询多个包含
db.students.find({hobby:{$in:['smoking','read']}});
$size 按照长度来查
db.students.find({hobby:{$size:3}});
$slice 截取一段数组 正数是正数的，负数就是倒数的
db.students.find({hobby:{$size:3}},{hobby:{$slice:1},_id:0});

$where
万能查询，里面填写js，只要返回布尔值就可以
db.students.find({$where:'this.age>30&&this.age<100'});
db.students.find({$where:'this.age%7==0'});


查询里面可以写正则
db.students.find({name:/w/});

分页
.skip(3)跳过三条
.limit(3)取三条
db.students.find().skip(3).limit(3);

var pagesize=3;
var pagenumber=2;
db.students.find().skip((pagenumber-1)*pagesize).limit(pagesize);

排序
.sort({age:-1}) 顺序1，倒叙-1
db.students.find().sort({age:-1}).skip((pagenumber-1)*pagesize).limit(pagesize);



可以新建一个mongo.config的配置文件
里面是各种配置，运行配置文件启动mongo

data目录要事先建立好
dbpath=E:\demo\mongodb\mongouse/data
logpath=E:\demo\mongodb\mongouse/log

启动配置项
mongod --config mongo.config
如果已经运行mongo则可以使用load()运行文件
load('../3.batch.js')

导出数据库
mongoexport -d school -c a -o a.bak

-h [ --host ]	连接的数据库
--port	端口号
-u	用户名
-p	密码
-d	导出的数据库
-c	指定导出的集合
-o	导出的文件存储路径
-q	进行过滤

导入数据库
mongoimport -d school -c a a.bak

这样导出有个弊端，就是导出的只是json，不能导出整个数据库，不能导出二进制

二进制导出
单个
mongodump -d school -o s.dmp
多个
mongodump mdmp
导出的是二进制，而且是文件夹，里面是集合，整个数据库，没有兼容性问题
二进制导入
单个
mongorestore -d school s.dmp/school
多个
mongorestore mdmp

也可以直接拷贝data文件夹，但是这样不灵活



锁定和解锁数据库
锁定
db.runCommand({fsync:1,lock:1});
解锁
db.fsyncUnlock();

安全措施
1.物理隔离，点都不插，不靠谱
2.网络隔离 局域网，外网访问不了
3.防火墙 配置白名单，黑名单
4.用户名密码验证

创建用户
               用户名      密码         权限
db.createUser({user:'aaa',pwd:'111111',roles:[{role:'readWrite',db:'school'}]});

查看全部用户
db.system.users.find();

查看用户的权限
> db.runCommand({usersInfo:'zfpx2',showPrivileges:true});

删除用户
db.removeUser('bbb');


启动权限
mongod --dbpath d:\Mongodb\data --auth

用户登录和修改密码
> use admin;
> use admin;
switched to db admin
> db.auth('zfpx','123456')
1
> db.changeUserPassword('zfpx','123');
> db.auth('zfpx','123')
1
用户的操作都需要在admin数据库下面进行操作
如果在某个数据库下面执行操作，那么只对当前数据库生效



分组group

db.runCommand({
    group:{
        ns:集合名称，
        key:分组的键,
        initial:初始值,
        $reduce:分解器
        condition:条件,
        finalize:完成时的处理器
    }
});
db.runCommand({
    group: {
        ns: 'b',
        key: { province: 1,home:1 },
        query: { age: { $gt: 1 } },
        initial: { total: 0 },
        $reduce: function (doc, initial) {
            initial.total += doc.age;
        }
    }
});
按城市分组，求每个城市里符合条件的人的年龄总和
db.runCommand({
    group:{
        ns:'students',
        key:{home:true},
        initial:{total:0},
        $reduce:function(doc,result){
                result.total += doc.age;   
        },
        condition:{age:{$gt:1}},
        finalize:function(result){
            result.desc = '本城市的总年龄为'+result.total;
        }
    }
});

查找不重复的值 distinct
db.runCommand({distinct:'b',key:'province'});
db.runCommand({distinct:'b',key:'province'}).values;

数据库版本信息
db.runCommand({buildInfo:1});

获取集合上一次错误
db.runCommand({getLastError:"students"});

mysql 可靠稳定，不会出错。缺点，干活慢，并发少1200

mongodb 读写速度非常快，干活快，并发16000，
可靠性不高，不对结果负责，读写10000条，都会丢三五条。

readis 读写快，可靠稳定
缺点性能单一，存储只有key-value




固定集合
size 是整个集合空间大小，单位为【KB】
max 是集合文档个数上限，单位是【个】
固定大小，满了会吧老的覆盖
db.createCollection('logs',{size:5,max:5,capped:true});


判断集合是否为固定集合: 
db.logs.isCapped()


gridfs 大文件存储
gridfs是mongodb自带的文件系统，使用二进制存储文件。
mongodb可以以BSON格式保存二进制对象。
但是BSON对象的体积不能超过4M。所以mongodb提供了mongofiles。
它可以把一个大文件透明地分割成小文件（256K），从而保存大体积的数据。



建立索引                            索引名       唯一索引      删除重复(如果已经有重复的索引，就不能设置了)
db.students.ensureIndex({age:1},{name:ageIndex,unique:true,dropDups:true});

查看索引
db.students.getIndexes();

删除索引
db.students.dropIndex('age_1');


建立唯一索引
db.students.ensureIndex({age:1},{name:ageIndex,unique:true,dropDups:true});

在后台创建索引
db.students.ensureIndex({name:1},{name:'nameIndex',unique:true,background:true});

多键索引
db.students.ensureIndex({hobby:1});
db.students.find({hobby:'football'}).explain(true);

过期索引
在一定的时间后会过期，过期后相应数据数据被删除，
db.students.insert({time:new Date()});
db.students.ensureIndex({time:1},{expireAfterSeconds:10});

1.索引字段的值必须Date对象，不能是其它类型比如时间戳
2.删除时间不精确，每60秒跑一次。删除也要时间，所以有误差。

全文索引
应用与关键字查询
建立索引{content:'text'}
db.students.ensureIndex({content:'text'});
包含boy的
db.students.find({$text:{$search:'boy'}});
包含boy不包含gitl的
db.students.find({$text:{$search:'boy -girl'}});
查找boy girl的
db.students.find({$text:{$search:"\"boy girl\""}});


二维索引
var gis=[
    {gis:{x:1,y:1}},
    {gis:{x:1,y:2}},
    {gis:{x:1,y:3}},
    {gis:{x:2,y:1}},
    {gis:{x:2,y:2}},
    {gis:{x:2,y:3}},
    {gis:{x:3,y:1}},
    {gis:{x:3,y:2}},
    {gis:{x:3,y:3}},
]
db.maps.ensureIndex({gis:'2d'});
查找最近的三个点 .limit
db.maps.find({gis:{$near:[1,1]}}).limit(3);
矩形查找 $box
db.d.find({gis:{$within:{$box:[[1,3],[2,2]]}}});
圆心查找 $center
                                    圆心，半径
db.d.find({gis:{$within:{$center:[[2,2],1]}}});

索引1为升序-1为倒序
索引虽然可以提高查询性能，但是会降低插入性能
对于插入多查询少的不建议创建索引
数量不大不需要建索引，性能提升不明显，反而大大增加内存和硬盘的消耗
查询数据超过表的30%不要用索引字段查询
排序工作的时候可以建立索引，提高拍寻速度
数字索引比字符串索引要快


























